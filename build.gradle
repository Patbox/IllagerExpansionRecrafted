buildscript {
    dependencies {
        classpath "de.guntram.mcmod:crowdin-translate:1.4+1.19.3"
    }
    repositories {
        maven {
            name = 'CrowdinTranslate source'
            url = "https://minecraft.guntram.de/maven/"
        }
    }
}


plugins {
    id 'fabric-loom' version '1.6.+'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'de.guntram.mcmod.crowdin-translate'
crowdintranslate.crowdinProjectName = 'patbox-mods'
crowdintranslate.jsonSourceName = 'illager_expansion_recrafted'
crowdintranslate.minecraftProjectName = '../data/illagerexp'
crowdintranslate.verbose = false

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group


repositories {
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.nucleoid.xyz" }
}

loom {
    accessWidenerPath = file("src/main/resources/illagerexp.accesswidener")

    runs {
        datagen {
            server()
            name = "Data Generation"
            runDir = "build/datagen"
            vmArg("-Dfabric-api.datagen")
            vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
        }
    }
}


sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated"
            ]
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Fabric ASM
    modImplementation 'com.github.chocohead:fabric-asm:v2.3'
    include 'com.github.chocohead:fabric-asm:v2.3'

    modCompileOnly /*modRuntimeOnly*/("eu.pb4.polyport:trinkets:3.9.0+polymerport.1")

    modImplementation include("eu.pb4:sgui:1.6.0+1.21")
    modImplementation "eu.pb4:polymer-autohost:0.9.2+1.21"
    modImplementation "eu.pb4:polymer-core:0.9.2+1.21"
    modImplementation "eu.pb4:polymer-resource-pack:0.9.2+1.21"
    modImplementation "eu.pb4:polymer-virtual-entity:0.9.2+1.21"
    modImplementation include("xyz.nucleoid:server-translations-api:2.3.1+1.21-pre2")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    from("src/main/resources/data/illagerexp/lang") {
        into("assets/illagerexp/lang")
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
    }
}


if (System.getenv("MODRINTH")) {
    modrinth {
        token = System.getenv("MODRINTH")
        projectId = 'zkp424MG'// The ID of your modrinth project, slugs will not work.
        versionNumber = "" + version // The version of the mod to upload.
        versionType = "beta"
        uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
        gameVersions = [((String) project.minecraft_version)]
        changelog = System.getenv("CHANGELOG")
        loaders = ["fabric", "quilt"]

        dependencies {
            required.project "trinkets-polymer"
            optional.project "polydex"
        }
    }

    remapJar {
        finalizedBy project.tasks.modrinth
    }
}

